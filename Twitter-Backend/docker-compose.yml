version: '3.8'

services:

  tweet_service:
    image: tweet_service
    container_name: tweet_service
    build:
      context: .
      dockerfile: ./tweet_service/Dockerfile
    restart: always
    ports:
      - ${TWEET_SERVICE_PORT}:${TWEET_SERVICE_PORT}
    environment:
      TWEET_DB: ${TWEET_DB}
      TWEET_SERVICE_PORT: ${TWEET_SERVICE_PORT}
    depends_on:
       tweet_db:
         condition: service_healthy
    networks:
      - network

  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: always
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network

  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: always
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      SECRET_KEY: ${SECRET_KEY}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      SMTP_AUTH_MAIL: ${SMTP_AUTH_MAIL}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
    depends_on:
      - auth_db
    networks:
      - network

  api_gateway:
    build:
      context: ./api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - "8000:8000"
    networks:
      - network

#  tweet_db:
#    image: mongo
#    container_name: tweet_db
#    restart: on-failure
#    networks:
#      - network

  tweet_db:
    image: cassandra
    container_name: tweet_db
    restart: always
    ports:
      - "9042:9042"
    # Docker healthcheck - checks if database is "alive"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'describe cluster'" ]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cassandra_store:/var/lib/cassandra/data
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

volumes:
  cassandra_store:

networks:
  network:
    driver: bridge